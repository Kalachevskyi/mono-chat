// Code generated by MockGen. DO NOT EDIT.
// Source: ./token.go

// Package usecases_test is a generated GoMock package.
package usecases_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenRepo is a mock of TokenRepo interface
type MockTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepoMockRecorder
}

// MockTokenRepoMockRecorder is the mock recorder for MockTokenRepo
type MockTokenRepoMockRecorder struct {
	mock *MockTokenRepo
}

// NewMockTokenRepo creates a new mock instance
func NewMockTokenRepo(ctrl *gomock.Controller) *MockTokenRepo {
	mock := &MockTokenRepo{ctrl: ctrl}
	mock.recorder = &MockTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenRepo) EXPECT() *MockTokenRepoMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockTokenRepo) Set(key, token string) error {
	ret := m.ctrl.Call(m, "Set", key, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockTokenRepoMockRecorder) Set(key, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTokenRepo)(nil).Set), key, token)
}

// CheckUser mocks base method
func (m *MockTokenRepo) Get(key string) (string, error) {
	ret := m.ctrl.Call(m, "CheckUser", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser
func (mr *MockTokenRepoMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockTokenRepo)(nil).Get), key)
}
