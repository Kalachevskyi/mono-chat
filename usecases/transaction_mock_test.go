// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go

// Package usecases is a generated GoMock package.
package usecases_test

import (
	reflect "reflect"
	time "time"

	entities "github.com/Kalachevskyi/mono-chat/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockLogger) Error(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), args...)
}

// MockTransactionRepo is a mock of TransactionRepo interface
type MockTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoMockRecorder
}

// MockTransactionRepoMockRecorder is the mock recorder for MockTransactionRepo
type MockTransactionRepoMockRecorder struct {
	mock *MockTransactionRepo
}

// NewMockTransactionRepo creates a new mock instance
func NewMockTransactionRepo(ctrl *gomock.Controller) *MockTransactionRepo {
	mock := &MockTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionRepo) EXPECT() *MockTransactionRepoMockRecorder {
	return m.recorder
}

// GetTransactions mocks base method
func (m *MockTransactionRepo) GetTransactions(token string, from, to time.Time) ([]entities.Transaction, error) {
	ret := m.ctrl.Call(m, "GetTransactions", token, from, to)
	ret0, _ := ret[0].([]entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockTransactionRepoMockRecorder) GetTransactions(token, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).GetTransactions), token, from, to)
}
